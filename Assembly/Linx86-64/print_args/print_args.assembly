     1                                  section .text ; program currently prints ONE arg
     2                                  
     3                                  global _start
     4                                  _start:
     5 00000000 4883C008                    add rax, 0x8
     6 00000004 4801C4                      add rsp, rax
     7 00000007 488B3424                    mov rsi, [rsp]       ;copy arg to rsi (message)
     8 0000000B 4829C4                      sub rsp, rax
     9                                  
    10                                  global _find_length
    11                                  _find_length:
    12 0000000E BB00000000                  mov rbx, 0x0         ;clear rbx
    13 00000013 4889F1                      mov rcx, rsi         ;copy arg to rcx
    14 00000016 4883F900                    cmp rcx, 0x0         ;check if arg is empty
    15 0000001A 7457                        jz _exit             ;exit if empty
    16                                  
    17                                  _loop:                   ;iterate through the arg
    18 0000001C 8A11                        mov dl, [rcx]        ;copy low byte of [rcx] to dl
    19 0000001E 80FA00                      cmp dl, 0x0          ;cmp to null byte
    20 00000021 7405                        jz _print            ;if null byte, jump to print
    21 00000023 48FFC1                      inc rcx              ;if not null byte, inc byte of rcx
    22 00000026 EBF4                        jmp _loop            ;loop again
    23                                  
    24                                  global _print
    25                                  _print:
    26 00000028 50                          push rax
    27 00000029 B800000000                  mov rax, 0x0
    28 0000002E B801000000                  mov rax, 0x1         ;system call number (sys_write)
    29 00000033 BF01000000                  mov rdi, 0x1         ;file descriptor (stdout)
    30 00000038 4829F1                      sub rcx, rsi         ;subtract the differences
    31 0000003B 4889CA                      mov rdx, rcx         ;message length
    32 0000003E 0F05                        syscall              ;sys_write
    33 00000040 B801000000                  mov rax, 0x1         ;system call number (sys_write)
    34 00000045 BF01000000                  mov rdi, 0x1         ;file descriptor (stdout)
    35 0000004A 48BE-                       mov rsi, new_line    ;print new line
    35 0000004C [0000000000000000] 
    36 00000054 BA02000000                  mov rdx, len         ;message length
    37 00000059 0F05                        syscall              ;sys_write
    38 0000005B B800000000                  mov rax, 0x0         ;clear rax
    39 00000060 58                          pop rax
    40                                  
    41                                  _check_args:
    42 00000061 5B                          pop rbx
    43 00000062 48FFCB                      dec rbx
    44 00000065 4883FB00                    cmp rbx, 0x0
    45 00000069 7408                        jz _exit
    46 0000006B 53                          push rbx
    47 0000006C BB00000000                  mov rbx, 0x0
    48 00000071 EB8D                        jmp _start
    49                                  
    50                                  global _exit
    51                                  _exit:
    52 00000073 B83C000000                  mov rax, 0x3c        ;system call number (sys_exit)
    53 00000078 BF00000000                  mov rdi, 0x0         ;clear ebx
    54 0000007D 0F05                        syscall              ;call kernel
    55                                  
    56                                  section .data            ; Used these to debug the sys_write, no practcical use
    57 00000000 0D0A                        new_line: db 0dh, 0ah
    58                                      len equ $ - new_line   ;length of the string
